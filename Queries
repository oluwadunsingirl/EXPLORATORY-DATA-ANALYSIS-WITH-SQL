--EXPLORE ALL OBJECTS IN THE DATABASE
SELECT * FROM INFORMATION_SCHEMA.TABLES


--EXPLORE ALL COLUMNS IN THE DATABASE
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

--DIMENSION EXPLORATION- COUNTRY
SELECT DISTINCT country FROM dim_customers_gold

--MAJOR PRODUCT CATEGORIES
SELECT DISTINCT category FROM dim_product_gold

--category, sub-category and product name
SELECT DISTINCT category, subcategory, product_name FROM dim_product_gold
ORDER BY category, subcategory, product_name


--DATE EXPLORATION (OLDEST AND NEWEST DATE)
SELECT
	MIN(order_date) AS fiirst_order,
	MAX(order_date) AS last_order
FROM fact_sales_gold

--HOW MANY YEARS OF SALES?
SELECT
	DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) as years_of_sales
FROM fact_sales_gold

--AGE OF THE YOUNGEST AND OLDEST CUSTOMERS
SELECT 
	DATEDIFF(YEAR, MIN(birthdate), GETDATE()) as oldest_customer,
	DATEDIFF(YEAR, MAX(birthdate), GETDATE()) as youngest_customer
FROM dim_customers_gold


--KEY METRICS EXPLORATION- TOTAL SALES
SELECT 
	SUM(sales_amount) AS total_sales
FROM fact_sales_gold

--COUNT OF ITEMS SOLD
SELECT SUM(quantity) AS total_quantity
FROM fact_sales_gold

--AVERAGE SELLING PRICE
SELECT AVG(price) AS avg_price FROM fact_sales_gold

--TOTAL NUMBER OF ORDERS
SELECT 
	COUNT(DISTINCT(order_number)) AS total_orders 
FROM fact_sales_gold

--TOTAL NUMBER OF PRODUCT 
SELECT
	COUNT(DISTINCT(product_name)) AS total_product
FROM dim_product_gold

--TOTAL NUMBER OF CUSTOMERS
SELECT COUNT(DISTINCT(customer_key)) AS total_customer
FROM dim_customers_gold

--NUMBER OF CUSTOMERS THAT HAVE PLACED ORDERS
SELECT
	COUNT(DISTINCT(customer_key)) AS total_order_placed
FROM fact_sales_gold 


-- A REPORT THAT SHOWS KEY METRICS
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM fact_sales_gold
UNION ALL
SELECT 'Total Quantity', SUM(quantity) FROM fact_sales_gold
UNION ALL
SELECT 'Total No. of Orders', cOUNT(DISTINCT order_number) FROM fact_sales_gold
UNION ALL
SELECT 'Avg. Selling Price', AVG(sales_amount) FROM fact_sales_gold
UNION ALL
SELECT 'Total No. of Product', COUNT(DISTINCT product_name) FROM dim_product_gold
UNION ALL
SELECT 'Total No. of Customers', COUNT(DISTINCT customer_key) FROM fact_sales_gold


--MAGNITUDE ANALYSIS : total number of customers by country

SELECT  country, COUNT(customer_key) AS No_of_customers_by_country
FROM dim_customers_gold 
GROUP BY country

--TOTAL NUMBER OF CUSTOMERS BY GENDER
SELECT gender, COUNT(customer_key) No_of_customers
FROM dim_customers_gold
GROUP BY gender

--TOTAL PRODUCT BY CATEGORY
SELECT category, COUNT(DISTINCT product_key) AS no_product
FROM dim_product_gold
GROUP BY category

--AVERAGE COST IN EACH CATEGORY
SELECT 
	category, 
	AVG(cost) AS avg_cost
FROM dim_product_gold
GROUP BY category

--TOTAL REVENUE GENERATED FOR EACH CATEGORY
SELECT
	P.category, 
	SUM(sales_amount) AS total_revenue
FROM fact_sales_gold F
LEFT JOIN dim_product_gold P
ON F.product_key = P.product_key
GROUP BY category

--TOTAL REVENUE GENERATED BY COUNTRY
SELECT p.country, SUM(sales_amount) AS total_revenue
FROM fact_sales_gold s
LEFT JOIN dim_customers_gold p
ON s.customer_key = p.customer_key
GROUP BY country

--ITEMS SOLD ACROSS COUNTRIES
SELECT 
	c.country,
	SUM(quantity) AS items_sold
FROM fact_sales_gold f
LEFT JOIN dim_customers_gold c
ON f.customer_key = c.customer_key
GROUP BY country

--TOP 5 BEST PERFORMERS
SELECT TOP 5  product_name, SUM(sales_amount) AS total_sales
FROM fact_sales_gold F
LEFT JOIN dim_product_gold P
ON F.product_key = P.product_key
GROUP BY product_name
ORDER BY total_sales desc

--BOTTOM 5 WORST PERFORMERS
SELECT TOP 5  product_name, SUM(sales_amount) AS total_sales
FROM fact_sales_gold F
LEFT JOIN dim_product_gold P
ON F.product_key = P.product_key
GROUP BY product_name
ORDER BY total_sales asc

SELECT
	  DATETRUNC(MONTH, order_date) order_by_year,
	  SUM(sales_amount) AS total_sales
	  FROM [silver duplicate].[dbo].[fact_sales_gold]
	  WHERE order_date IS NOT NULL
	  GROUP BY DATETRUNC(MONTH, order_date)
	  ORDER BY DATETRUNC(MONTH, order_date)

	--CUMMULATIVE ANALYSIS
	--calculate the total sales by year 
	--and the running total of sales overtime
SELECT
order_date,
total_sales,
SUM(total_sales) OVER(ORDER BY order_date) AS running_total
FROM
(
SELECT 
DATETRUNC (MONTH, order_date) as order_date,
SUM(sales_amount) AS total_sales
FROM fact_sales_gold
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(MONTH, order_date)
)g

		--PERFORMANCE ANALYSIS
	/* ANALYSE THE YEARLY PERFORMANCE OF PRODUCTS BY COMPARING THEIR SALES TO BOTH THE AVERAGE SALES
	PERFORMANE OF THE PRODUCT AND THE PREVIOUS YEAR'S SALES*/
WITH yearly_sales AS (
SELECT
YEAR(f.order_date) as order_year,
p.product_name,
SUM(f.sales_amount) as actual_sales 
FROM fact_sales_gold f
LEFT JOIN dim_product_gold p
ON f.product_key = p.product_key
GROUP BY 
YEAR(order_date), 
product_name
)
SELECT 
order_year,
product_name,
actual_sales,
AVG(actual_sales) OVER(PARTITION BY product_name) AS avg_sales,
actual_sales - AVG(actual_sales) OVER(PARTITION BY product_name) AS differences,
LAG (actual_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS prev_sales,
actual_sales - LAG (actual_sales) OVER(PARTITION BY product_name ORDER BY order_year) AS diff_prev,
CASE WHEN actual_sales - LAG (actual_sales) OVER(PARTITION BY product_name ORDER BY order_year) > 0 THEN 'Increase'
     WHEN actual_sales - LAG (actual_sales) OVER(PARTITION BY product_name ORDER BY order_year) < 0 THEN 'Decrease'
     ELSE 'No Change'
END prev_cHanges
FROM yearly_sales
ORDER BY product_name, order_year


--WHICH cATEGORY CONTRIBUTES THE MOST TO OVERALL SALES
WITH sales_category AS (
SELECT 
category,
SUM(sales_amount) total_sales
FROM fact_sales_gold f
LEFT JOIN dim_product_gold g
ON f.product_key = g.product_key
GROUP BY category
)
SELECT 
category,
total_sales,
SUM(total_sales) OVER() overall_sales,
CONCAT(ROUND((CAST(total_sales AS FLOAT) / SUM(total_sales) OVER()) * 100, 2), '%') as percentage_of_total_sales
FROM sales_category






